@model Final.Models.UserViewModel
@using Final.Entity
@{
    Layout = "_Layout";
}
@section Css{
    
}

@if (User.IsInRole("Admin") || User.IsInRole("Root"))
{
    <div class="companies">
            <div class="company-section my-4">
               @await Component.InvokeAsync("MqttLogs")
            </div>
    </div>


    <section id="CompanyManagement">
        <div class="card shadow mt-4">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title mb-0"><i class="fas fa-tv"></i> Company Management</h3>
            </div>
            <div class="card-body">
                <!-- Invoke the Company List ViewComponent -->
                @await Component.InvokeAsync("CompanyList")
            </div>
        </div>
    </section>

    <section id="RoleManagment">
    <div class="card shadow mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0"><i class="fas fa-tv"></i> Role Managment</h3>
        </div>
        <div class="card-body">
            <!-- Invoke the User Management ViewComponent -->
            @await Component.InvokeAsync("RoleManagement")
        </div>
    </div>
    </section>

    <section id="UserManagment">
    <div class="card shadow mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0"><i class="fas fa-tv"></i> User Managment</h3>
        </div>
        <div class="card-body">
            <!-- Invoke the User Management ViewComponent -->
            @await Component.InvokeAsync("UserManagement")
        </div>
    </div>
    </section>


  <div class="container my-5 animate__animated animate__fadeIn">
        <div class="row">
            @foreach (var company in Model.Companies)
            {
                <div class="col-12 col-md-6 mb-4 w-100">
                    <div class="card shadow">
                        <div class="card-header bg-secondary text-white">
                            <h3 class="card-title mb-0">@company.Name - Sending Topics</h3>
                            <small>Base Topic: @company.BaseTopic</small>
                        </div>
                        <div class="card-body">
                            <div class="accordion" id="accordion-@company.Id">
                                <div class="accordion-item">
                                    <h2 class="accordion-header" id="heading-@company.Id">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@company.Id" aria-expanded="false" aria-controls="collapse-@company.Id">
                                            Toggle Sending Topics
                                        </button>
                                    </h2>
                                    <div id="collapse-@company.Id" class="accordion-collapse collapse" aria-labelledby="heading-@company.Id" data-bs-parent="#accordion-@company.Id">
                                        <div class="accordion-body">
                                            @{
                                                // Get sending topics at the company level.
                                                var sendingCompanyTopics = company.CompanyTopics.Where(t => t.purpose == TopicPurpose.Sending).ToList();
                                                // Get sending topics from tools.
                                                var sendingToolTopics = company.Tools
                                                    .SelectMany(t => t.Topics)
                                                    .Where(t => t.purpose == TopicPurpose.Sending)
                                                    .ToList();
                                                var allSendingTopics = sendingCompanyTopics.Concat(sendingToolTopics).ToList();
                                            }
                                            @if (allSendingTopics.Any())
                                            {
                                                <div class="table-responsive">
                                                    <table class="table table-bordered table-sm">
                                                        <thead class="thead-light">
                                                            <tr>
                                                                <th>Topic Template</th>
                                                                <th>Base Topic</th>
                                                                <th>How Many</th>
                                                                <th>Data Type</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var topic in allSendingTopics)
                                                            {
                                                                <tr>
                                                                    <td>@topic.TopicTemplate</td>
                                                                    <td>@topic.BaseTopic</td>
                                                                    <td>@topic.HowMany</td>
                                                                    <td>@topic.DataType</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <p class="text-muted">No sending topics available for this company.</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<!-- Header Row: User Info, Current Time, Logout -->
<div class="container my-3 border-bottom border-start border-end border-radius shadow">
    <!-- TradingView Widget BEGIN -->
<div class="tradingview-widget-container">
  <div class="tradingview-widget-container__widget"></div>
  <div class="tradingview-widget-copyright"><a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank"><span class="blue-text">Track all markets on TradingView</span></a></div>
  <script type="text/javascript" src="https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js" async>
  {
  "symbols": [
    [
      "BINANCE:BTCUSDT|1D"
    ],
    [
      "FOREXCOM:USDTRY|1D"
    ],
    [
      "CAPITALCOM:EURTRY|1D"
    ],
    [
      "CAPITALCOM:TRYJPY|1D"
    ],
    [
      "SAXO:TRYDKK|1D"
    ]
  ],
  "chartOnly": false,
  "width": "100%",
  "height": "100%",
  "locale": "en",
  "colorTheme": "dark",
  "autosize": true,
  "showVolume": false,
  "showMA": false,
  "hideDateRanges": false,
  "hideMarketStatus": false,
  "hideSymbolLogo": false,
  "scalePosition": "right",
  "scaleMode": "Normal",
  "fontFamily": "-apple-system, BlinkMacSystemFont, Trebuchet MS, Roboto, Ubuntu, sans-serif",
  "fontSize": "10",
  "noTimeScale": false,
  "valuesTracking": "1",
  "changeMode": "price-and-percent",
  "chartType": "area",
  "maLineColor": "#2962FF",
  "maLineWidth": 1,
  "maLength": 9,
  "headerFontSize": "medium",
  "lineWidth": 2,
  "lineType": 0,
  "dateRanges": [
    "1d|1",
    "1m|30",
    "3m|60",
    "12m|1D",
    "60m|1W",
    "all|1M"
  ]
}
  </script>
</div>
<!-- TradingView Widget END -->
    <div class="row align-items-center mb-4">
        <!-- User info -->
        <div class="col-md-4">
            <h4>@Model.FirstName @Model.LastName</h4>
        </div>
        <!-- Current time (will update via JavaScript) -->
        <div class="col-md-4 text-center">
            <span id="currentTime" class="fw-bold"></span>
        </div>
        <!-- Logout button -->
        <div class="col-md-4 text-end">
             <form asp-controller="Home" asp-action="Logout" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-danger">Logout</button>
             </form>
        </div>
    </div>
</div>

<!-- Company Cards Section -->
<div class="company-dashboard">
    @await Component.InvokeAsync("CompanyDashboard")
</div>


@section Scripts {
<script>
  $(document).ready(function() {
    // Users Table
    $('#usersTable').DataTable({
      responsive: {
        details: {
          type: 'column', // Could also be 'inline' or 'modal'
          target: 'tr'
        }
      },
      // Example config: 
      // Show 10, 25, 50, or all entries
      lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],
      // Turn on ordering, searching, etc. 
      order: [],   // By default, no initial ordering
      paging: true,
      searching: true,
      autoWidth: false,
      columnDefs: [
        { responsivePriority: 1, targets: 1 }, // Email
        { responsivePriority: 2, targets: 2 }, // Actions
        { responsivePriority: 3, targets: 0 }  // ID
      ]
    });

    // Roles Table
    $('#rolesTable').DataTable({
      responsive: {
        details: {
          type: 'column',
          target: 'tr'
        }
      },
      lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],
      order: [],
      paging: true,
      searching: true,
      autoWidth: false,
      columnDefs: [
        { responsivePriority: 1, targets: 0 }, // Name
        { responsivePriority: 2, targets: 2 }, // Action
        { responsivePriority: 3, targets: 1 }  // ID
      ]
    });
  });
</script>
<script>
    $(document).ready(function () {
        $('#companyTable').DataTable({
            responsive: true,
            // You can add additional DataTables options here
        });
    });
</script>
    <script>
        // Update current time every second.
        function updateTime() {
            var now = new Date();
            document.getElementById("currentTime").innerText = now.toLocaleTimeString();
        }
        updateTime();
        setInterval(updateTime, 1000);
    </script>



    <!-- Use your local SignalR file; ensure that the file exists at ~/js/signalr.min.js -->
    <script src="~/js/signalr.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!window.signalR) {
                console.error("SignalR library is not loaded. Verify the script path.");
                return;
            }

            // Build a SignalR connection to the NotificationHub.
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .withAutomaticReconnect()
                .build();

            // DOM elements
            const logMessagesDiv = document.getElementById("logMessages");
            const searchInput = document.getElementById("logSearch");
            const btnPublish = document.getElementById("btnPublish");
            const txtTopic = document.getElementById("txtTopic");
            const txtPayload = document.getElementById("txtPayload");

            // Initialize logs array with server-rendered logs.
            let logs = [];
            document.querySelectorAll(".log-entry").forEach(logDiv => {
                logs.push(logDiv.innerHTML.trim());
            });

            // Multi-keyword search: split query into tokens and filter logs that contain every token.
            function renderLogs() {
                const query = searchInput.value.toLowerCase().trim();
                const tokens = query.split(/\s+/).filter(Boolean);

                logMessagesDiv.innerHTML = "";
                const filteredLogs = logs.filter(log => {
                    const lowerLog = log.toLowerCase();
                    return tokens.every(token => lowerLog.includes(token));
                });
                filteredLogs.forEach(log => {
                    let logDiv = document.createElement("div");
                    logDiv.className = "log-entry";
                    logDiv.style.padding = "2px 5px";
                    logDiv.style.borderBottom = "1px solid #eee";
                    logDiv.innerHTML = log;
                    logMessagesDiv.appendChild(logDiv);
                });
            }

            searchInput.addEventListener("input", renderLogs);

            // Listen for new logs from the hub.
            connection.on("ReceiveSubscriptionLog", function (message) {
                console.log("Received log message:", message);
                logs.push(message);
                renderLogs();
            });

            // Publish button click handler.
            if (btnPublish && txtTopic && txtPayload) {
                btnPublish.addEventListener("click", function() {
                    const topic = txtTopic.value.trim();
                    const payload = txtPayload.value.trim();

                    if (!topic) {
                        alert("Please enter a topic.");
                        return;
                    }

                    console.log("Publishing message:", topic, payload);

                    // Invoke the PublishMessage method on the server.
                    // Here we pass three parameters, with the third being null.
                    connection.invoke("PublishMessage", topic, payload, null)
                        .then(() => {
                            console.log("Message published successfully.");
                            txtPayload.value = "";
                        })
                        .catch(err => console.error("Error publishing message:", err));
                });
            }

            // Start the SignalR connection.
            connection.start()
                .then(() => {
                    console.log("SignalR connection established.");
                    renderLogs();
                })
                .catch(err => console.error("Error establishing SignalR connection:", err.toString()));

            // Handle reconnection events.
            connection.onreconnecting(() => {
                console.warn("Reconnecting to SignalR...");
            });
            connection.onreconnected(() => {
                console.log("Reconnected to SignalR.");
            });
            connection.onclose(() => {
                console.error("SignalR connection lost.");
            });
        });
    </script>
}
