@model Final.Models.UserEditModel

@{
    Layout = "_Layout";
}

<h1 class="h3 text-center mb-4">Edit User</h1>
<hr />
<form asp-controller="Home" asp-action="UserEdit" method="post" class="needs-validation" novalidate>
    <input type="hidden" asp-for="UserId" />
    <div class="row">
        <div class="col-md-8">
            <div asp-validation-summary="All" class="text-danger mb-3"></div>
            <div class="mb-3">
                <label asp-for="FirstName" class="form-label"></label>
                <input asp-for="FirstName" class="form-control" required />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="LastName" class="form-label"></label>
                <input asp-for="LastName" class="form-control" required />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="UserName" class="form-label"></label>
                <input asp-for="UserName" class="form-control" required />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" required />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="CreatedDate" class="form-label"></label>
                <input asp-for="CreatedDate" class="form-control" type="date" required />
                <span asp-validation-for="CreatedDate" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Password" class="form-label">New Password</label>
                <div class="input-group">
                    <!-- Added an explicit id="passwordField" -->
                    <input asp-for="Password" class="form-control" type="password" placeholder="Leave blank to keep current password" id="passwordField" />
                    <button class="btn btn-outline-secondary" type="button" id="generatePassword">Generate</button>
                    <button class="btn btn-outline-secondary" type="button" id="copyPassword">Copy</button>
                </div>
                <small class="form-text text-muted">
                    Leave blank if you do not want to change the password.
                </small>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary btn-block shadow-sm">Save Changes</button>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0">Roles</h6>
                </div>
                <div class="card-body">
                    @if (Model.AllRoles != null && Model.AllRoles.Any())
                    {
                        foreach (var roleName in Model.AllRoles)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="SelectedRoles" value="@roleName" id="role_@roleName"
                                       @(Model.SelectedRoles != null && Model.SelectedRoles.Contains(roleName) ? "checked" : "") />
                                <label class="form-check-label" for="role_@roleName">@roleName</label>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-danger">No roles available.</p>
                    }
                </div>
            </div>
            <div class="form-check">
                <input asp-for="EmailConfirmed" class="form-check-input" type="checkbox" />
                <label asp-for="EmailConfirmed" class="form-check-label"></label>
            </div>
            <div class="form-check">
                <input asp-for="Lockout" class="form-check-input" type="checkbox" />
                <label asp-for="Lockout" class="form-check-label">Lockout</label>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script src="~/modules/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>
    <script>
        // Random password generator function
        function generateRandomPassword(length) {
            const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@@#$%^&*()_+~`|}{[]:;?><,./-=";
            let password = "";
            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * charset.length);
                password += charset[randomIndex];
            }
            return password;
        }

        // When the Generate button is clicked
        document.getElementById("generatePassword").addEventListener("click", function () {
            const newPassword = generateRandomPassword(12); // Adjust length as needed
            const passwordField = document.getElementById("passwordField");
            passwordField.value = newPassword;
        });

        // When the Copy button is clicked, use the Clipboard API
        document.getElementById("copyPassword").addEventListener("click", function () {
            const passwordField = document.getElementById("passwordField");
            const newPassword = passwordField.value;
            if (!newPassword) {
                alert("No password to copy. Please generate one first.");
                return;
            }
            navigator.clipboard.writeText(newPassword)
                .then(function () {
                    alert("Password copied to clipboard!");
                })
                .catch(function (err) {
                    console.error("Could not copy text: ", err);
                });
        });

        // Client-side validation
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}
